name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - "master"
    paths:
      # - "src/ui/sck-web/*"
      - "src/web/*"
      - ".github/workflows/sck-web-app-*"

env:
  PROJECT_PATH: "src/web/"
  APACHE_HTACCESS_SCK_APP: "src/web/projects/sck-app/src/.htaccess"
  PROJECT_DIST_PATH: "src/web/dist/sck-app/"
  COURSE_SHEET_URL: ${{ secrets.COURSE_SHEET_URL }}
  TRIP_SHEET_URL: ${{ secrets.TRIP_SHEET_URL }}
  SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SERVER_ADDRESS: ${{ secrets.SERVER_ADDRESS }}
  SERVER_DIST_PATH: ${{ secrets.SERVER_DIST_PATH_STAGE }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      # ENV SUBSTITUTION
      - name: Environment substitution
        run: |
          cd ${{ env.PROJECT_PATH }}/scripts
          ./envsubst.sh "${{ secrets.COURSE_SHEET_URL }}" "${{ secrets.TRIP_SHEET_URL }}"

      # Install dependencies and build project
      - name: Install dependencies and build project
        run: |
          cd ${{ env.PROJECT_PATH }}
          npm install -g @angular/cli
          npm install
          npm run build

      # Copy .htaccess for Apache WebServer
      - name: Copy .htaccess file
        run: |
          cp ${{ env.APACHE_HTACCESS_SCK_APP }} ${{ env.PROJECT_DIST_PATH }}

      # Install sshpass
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      # # Definiere die SERVER_DIST_PATH abhÃ¤ngig vom Branch
      # - name: Set target path based on branch
      #   run: echo "SERVER_DIST_PATH=$([[ '${{ github.ref }}' == 'refs/heads/master' ]] && echo '${{ secrets.SERVER_DIST_PATH_BASE }}' || echo '${{ secrets.SERVER_DIST_PATH_STAGE }}')" >> $GITHUB_ENV

      # # Debugging-Schritt: Zeige SERVER_DIST_PATH und PROJECT_DIST_PATH an
      # - name: Print paths for debugging
      #   run: |
      #     echo "SERVER_DIST_PATH: ${{ env.SERVER_DIST_PATH }}"
      #     echo "PROJECT_DIST_PATH: ${{ env.PROJECT_DIST_PATH }}"
      #     ls -al ${{ env.PROJECT_DIST_PATH }}

      # Sicheres Kopieren von Dateien auf den Remote-Server
      - name: DEBUG
        run: |
          pwd
          ls -al
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_ADDRESS }} 'pwd && echo "========== DEBUG ======" && ls -al /html'

      # Sicheres Kopieren von Dateien auf den Remote-Server
      - name: SCP files to server
        run: |
          pwd
          ls -al
          cd "${{ env.PROJECT_DIST_PATH }}"
          pwd
          ls -al
          sshpass -p "${{ secrets.SSH_PASSWORD }}" \
            scp -v -o "StrictHostKeyChecking=no" -r . \
            ${{ secrets.SSH_USER }}@${{ secrets.SERVER_ADDRESS }}:${{ env.SERVER_DIST_PATH }}

      # # Secure copy files to remote server
      # - name: SCP files to server
      #   # env:
      #   #   SERVER_DIST_PATH: ${{ github.ref == 'refs/heads/master' && secrets.SERVER_DIST_PATH_BASE || secrets.SERVER_DIST_PATH_STAGE }}
      #   run: |
      #     cd ${{ env.PROJECT_DIST_PATH }}
      #     sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o "StrictHostKeyChecking=no" -r . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_ADDRESS }}:${{ env.SERVER_DIST_PATH }}
