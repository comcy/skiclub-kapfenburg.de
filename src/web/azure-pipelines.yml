# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  batch: true
  branches:
    include: 
    - '*'   

variables:
- name: PROJECT_PATH
  value: 'src/web/'
- name: PROJECT_DIST_PATH
  value: 'src/web/dist/sck-app/'
- name: FTP_DIST_PATH
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    value: '$(FTP_DIR_DIST)'
  ${{ else }}:
    value: '$(FTP_DIR_DIST_STAGE)'
- name: FTP_DIST_USER
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    value: '$(FTP_USER)'
  ${{ else }}:
    value: '$(FTP_USER_STAGE)'


pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
  displayName: 'Install Node.js'

# BUILD
- script: |
    cd ${{ variables.PROJECT_PATH}}
    npm install -g @angular/cli
    npm install
    npm run build
  displayName: 'npm install and build'

# DEBUG
- script: |
    echo ${{ variables.PROJECT_DIST_PATH }}
    echo ${{ variables.FTP_DIST_PATH }}
    echo ${{ variables.FTP_DIST_USER }}
    echo $(FTP_USER_PW)
  displayName: 'DEBUG'  

# INSTALL sshpass
- script: |
    sudo apt-get install -y sshpass
  displayName: 'Install sshpass'  

# Add known_hosts
# - script: |
#     ssh-keyscan -H ${FTP_SERVER} >> ~/.ssh/known_hosts
#   displayName: 'Add ${FTP_SERVER} to ~/.ssh/known_hosts'  

# Copy sshpass and scp
- script: |
    cd ${{ variables.PROJECT_DIST_PATH}}
    ls -al
    sshpass -p $(SSH_PASSWORD) yes | scp -r $(SSH_USER)@$(FTP_SERVER):${{ variables.FTP_DIST_PATH }} .
  displayName: 'Login to ${FTP_SERVER} and do secured copy'  
# Copy files over SSH
# Copy files or build artifacts to a remote machine over SSH
# - task: CopyFilesOverSSH@0
#   inputs:
#     sshEndpoint: 
#     sourceFolder: ${{ variables.PROJECT_DIST_PATH }}
#     contents: '**' 
#     targetFolder: ${{ variables.FTP_DIST_PATH }}
#     cleanTargetFolder: true # Optional
#     overwrite: true # Optional
#     failOnEmptySource: true # Optional
#     #flattenFolders: false # Optional

# - task: FtpUpload@2
#   inputs:
#     credentialsOption: 'inputs'
#     serverUrl: '$(FTP_SERVER)'
#     username: '${{ variables.FTP_DIST_USER }}'
#     password: '$(FTP_USER_PW)'
#     rootDirectory: '${{ variables.PROJECT_DIST_PATH }}'
#     filePatterns: '**'
#     remoteDirectory: '${{ variables.FTP_DIST_PATH }}'
#     clean: false
#     cleanContents: false
#     preservePaths: false
#     trustSSL: false
